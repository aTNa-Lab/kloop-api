{"version":3,"sources":["Components/UploadFile/Dropzone.js","Components/UploadEmbed/UploadEmbed.js","App.js","serviceWorker.js","index.js"],"names":["style","flex","display","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","Dropzone","props","onDrop","useCallback","acceptedFiles","forEach","file","handleChange","useDropzone","noClick","noKeyboard","multiple","getRootProps","getInputProps","open","className","width","type","onClick","UploadEmbed","TextareaAutosize","onChange","value","label","placeholder","variant","rowsMin","rowsMax","height","useStyles","makeStyles","theme","root","flexGrow","overflow","padding","spacing","gridItem","App","classes","useState","embed","setEmbed","setFile","handlePostData","a","console","log","formData","FormData","append","fetch","method","body","headers","response","result","error","Grid","container","direction","justify","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.67cf8cb4.chunk.js","sourcesContent":["import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\n\r\nconst style = {\r\n\tflex: 1,\r\n\tdisplay: 'flex',\r\n\tflexDirection: 'column',\r\n\talignItems: 'center',\r\n\tpaddingTop: '30px',\r\n\tpaddingBottom: '30px',\r\n\tpaddingLeft: 'auto',\r\n\tpaddingRight: 'auto',\r\n\tborderWidth: 2,\r\n\tborderRadius: 2,\r\n\tborderColor: '#eeeeee',\r\n\tborderStyle: 'dashed',\r\n\tbackgroundColor: '#fafafa',\r\n\tcolor: '#bdbdbd',\r\n\toutline: 'none',\r\n\ttransition: 'border .24s ease-in-out'\r\n  };\r\n  \r\n\r\nconst Dropzone = (props) => {\r\n\tconst onDrop = useCallback((acceptedFiles) => {\r\n\t  acceptedFiles.forEach((file) => {\r\n\t\tprops.handleChange(file)\r\n\t  })\r\n\t}, [])\r\n\t\r\n\tconst {\r\n\t\tacceptedFiles, \r\n\t\tgetRootProps, \r\n\t\tgetInputProps, \r\n\t\topen, \r\n\t} = useDropzone({\r\n\t\tonDrop, \r\n\t\tnoClick: true,\r\n\t\tnoKeyboard: true,\r\n\t\tmultiple: true\r\n\t})\r\n\r\n\t// const files = acceptedFiles.map(file => (\r\n\t// \t<li key={file.name}>\r\n\t// \t\t{file.name} - {file.size} bytes\r\n\t// \t</li>\r\n\t// ));\r\n\t\r\n\t// console.log(files)\r\n  \r\n\treturn (\r\n\t<section className=\"container\" style={{width: '100%'}}>\r\n\t  <div {...getRootProps({style})}>\r\n\t\t<input {...getInputProps()} />\r\n\t\t<p>Drag 'n' drop some files here, or click to select files</p>\r\n\t\t<button type=\"button\" onClick={open}>\r\n          Open File Dialog\r\n        </button>\r\n\t  </div>\r\n\t</section>\r\n\t)\r\n  }\r\n\r\nexport default Dropzone","import React from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nconst UploadEmbed = (props) => (\r\n    <TextareaAutosize\r\n    onChange={props.handleChange}\r\n    value={props.value}\r\n    label=\"Embedding\"\r\n    placeholder=\"Enter your embedding\"\r\n    variant=\"outlined\"\r\n    rowsMin={9}\r\n    rowsMax={9}\r\n    style={{width: '100%', height: '100%'}}\r\n    />\r\n)\r\n\r\nexport default UploadEmbed","import React, { useState } from 'react';\nimport Dropzone from './Components/UploadFile/Dropzone'\nimport UploadEmbed from './Components/UploadEmbed/UploadEmbed'\nimport './App.css';\nimport { Button, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    padding: theme.spacing(0, 3),\n  },\n  gridItem: {\n    padding: theme.spacing(1),\n    width: '50%'\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [embed, setEmbed] = useState('')\n  const [file, setFile] = useState(null)\n\n  const handleEmbedChange = (event) => {\n    setEmbed(event.target.value)\n  }\n\n  const handleFileChange = (file) => {\n    console.log(file)\n    setFile(file)\n  }\n\n  const handlePostData = async () => {\n    console.log(\"Sending data\")\n    console.log(file)\n    const formData = new FormData();\n    formData.append('token', 'TDlRJi8ORMGVrMedVkZDXsUDK')\n    formData.append('action', 'faiss_search')\n    formData.append('table_name', 'lukoshko_with_arr_norm')\n    formData.append('index_filename', 'ktrk_index.faiss')\n    formData.append('radius', 0.93)\n    formData.append('file1', file, 'image.jpg');\n\n    try {\n      const response = await fetch('https://9e94093f8750.sn.mynetname.net:5000/', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const result = await response;\n      console.log(response)\n      console.log('Успех:', result);\n    } catch (error) {\n      console.error('Ошибка:', error);\n    }\n  }\n\n  return (\n    <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\">\n      <Grid container justify=\"center\" className={classes.gridItem}><Dropzone handleChange={handleFileChange} /></Grid>\n      <Grid container justify=\"center\" className={classes.gridItem}><UploadEmbed handleChange={handleEmbedChange} value={embed}/></Grid>\n      <Grid container justify=\"center\" className={classes.gridItem}><button onClick={handlePostData}>Send Data</button></Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}